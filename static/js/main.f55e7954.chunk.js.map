{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/Section/Section.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactItem.js","components/ContactList/ContactList.js","components/ContactList/Filter.js","components/Section/Section.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ContactForm","onNewContactAdd","useState","name","setName","number","setNumber","handleChange","event","currentTarget","value","console","warn","reset","onSubmit","preventDefault","className","styles","title","button","type","onChange","pattern","required","small","ContactItem","id","onDeleteContact","contactlist__item","button__delete","onClick","ContactList","contacts","onDeleteCont","map","Filter","message","filter","Section","children","section","container","App","setContacts","setFilter","useEffect","storedContacts","localStorage","getItem","parsedContacts","JSON","parse","setItem","stringify","newName","newNumber","some","alert","newContact","uuidv4","prevState","normalizedFilter","toLowerCase","includes","getFilteredContacts","contactId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f55e7954.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactlist__item\":\"ContactList_contactlist__item__3FRoe\",\"title\":\"ContactList_title__11z8p\",\"button\":\"ContactList_button__1dt61\",\"button__delete\":\"ContactList_button__delete__1hy-c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactForm_button__3mtX9\",\"small\":\"ContactForm_small__3NbLz\",\"title\":\"ContactForm_title__11BcH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__3UhMf\",\"container\":\"Section_container__1g7Up\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './ContactForm.module.css';\n\nfunction ContactForm({ onNewContactAdd }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        console.warn(`Type of input cannot be handled!`);\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    //onFormSubmit(this.state);\n    onNewContactAdd(name, number);\n    reset();\n  };\n\n  const reset = () => {\n    setNumber('');\n    setName('');\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label className={styles.title}>\n          Name\n          <input\n            className={styles.button}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n\n        <label className={styles.title}>\n          Number\n          <input\n            className={styles.button}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n\n        <button type=\"submit\" className={styles.button + ' ' + styles.small}>\n          Сохранить\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  onNewContactAdd: PropTypes.func,\n};\n\n/*class ContactForm extends Component {\n  static propTypes = {\n    name: PropTypes.string,\n    number: PropTypes.string,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.props.onFormSubmit(this.state);\n    this.props.onNewContactAdd(this.state.name, this.state.number);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label className={styles.title}>\n            Name\n            <input\n              className={styles.button}\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={this.handleChange}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n            />\n          </label>\n\n          <label className={styles.title}>\n            Number\n            <input\n              className={styles.button}\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              onChange={this.handleChange}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n            />\n          </label>\n\n          <button type=\"submit\" className={styles.button + ' ' + styles.small}>\n            Сохранить\n          </button>\n        </form>\n      </div>\n    );\n  }\n}*/\n","import styles from './ContactList.module.css';\n\nconst ContactItem = ({ id, name, number, onDeleteContact }) => (\n  <li className={styles.contactlist__item}>\n    <p>\n      {name}, {number}\n    </p>\n    <button\n      type=\"button\"\n      className={styles.button__delete}\n      onClick={() => onDeleteContact(id)}\n    >\n      Удалить\n    </button>\n  </li>\n);\n\nexport default ContactItem;\n","import ContactItem from './ContactItem';\nimport PropTypes from 'prop-types';\n\nimport styles from './ContactList.module.css';\n\nconst ContactList = ({ contacts, onDeleteCont }) => (\n  <div>\n    <p className={styles.title}>Contact list</p>\n    <ul>\n      {contacts.map(({ name, number, id }) => {\n        return (\n          <ContactItem\n            key={id}\n            id={id}\n            name={name}\n            number={number}\n            onDeleteContact={onDeleteCont}\n          />\n        );\n      })}\n    </ul>\n  </div>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.any.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\n\nimport styles from './ContactList.module.css';\n\nconst Filter = ({ message, filter, onChange }) => (\n  <div>\n    <p className={styles.contactlist__item}>{message}</p>\n    <input\n      className={styles.button}\n      type=\"text\"\n      value={filter}\n      onChange={onChange}\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      required\n    />\n  </div>\n);\n\nFilter.propTypes = {\n  message: PropTypes.string.isRequired,\n  filter: PropTypes.string,\n};\n\nexport default Filter;\n","import PropTypes from 'prop-types';\nimport styles from './Section.module.css';\n\nconst Section = ({ title, children }) => (\n  <div className={styles.section + ' ' + styles.container}>\n    {title && <h2> {title}</h2>}\n    {children}\n  </div>\n);\n\nSection.propTypes = {\n  children: PropTypes.node,\n  title: PropTypes.string,\n};\n\nexport default Section;\n","import { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/ContactList/Filter';\nimport Section from './components/Section/Section';\n\nimport './App.css';\n\nfunction App() {\n  const [contacts, setContacts] = useState([\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ]);\n  // const [name, setName] = useState('');\n  // const [number, setNumber] = useState('');\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    const storedContacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(storedContacts);\n    if (parsedContacts) {\n      setContacts(parsedContacts);\n    }\n  }, []);\n\n  useEffect(() => {\n    //console.log('comp upd', this.state.contacts);\n\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  // hook updated\n  const handleChangeFilter = event => {\n    setFilter(event.currentTarget.value);\n  };\n\n  // const formSubmitHandler = data => {\n  //   console.log('formSubmitHandler data:', data);\n  // };\n\n  const addNewContact = (newName, newNumber) => {\n    const isNew = contacts.some(({ name }) => name === newName);\n    if (isNew) {\n      alert(`${newName} is already in contacts.`);\n      return;\n    }\n\n    if (newName && newNumber) {\n      const newContact = { id: uuidv4(), name: newName, number: newNumber };\n      setContacts(prevState => [newContact, ...prevState]);\n    }\n    // console.log('newName, newNumber', newName, newNumber);\n  };\n\n  const getFilteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  const deleteContactHandler = contactId => {\n    //console.log('id called: ', contactId);\n    setContacts(contacts => contacts.filter(({ id }) => id !== contactId));\n  };\n\n  // console.log('uuidv4():',uuidv4());\n  // console.log('this.state.name:',this.state.name);\n  // console.log('this.state.number:',this.state.number);\n\n  return (\n    <div className=\"App\">\n      <Section title=\"Phonebook\">\n        <ContactForm\n          //onFormSubmit={formSubmitHandler}\n          onNewContactAdd={addNewContact}\n        />\n      </Section>\n\n      <Section title=\"Contacts\">\n        <Filter\n          message=\"Find contacts by name\"\n          filter={filter}\n          onChange={handleChangeFilter}\n        />\n\n        <ContactList\n          contacts={getFilteredContacts()}\n          onDeleteCont={deleteContactHandler}\n        />\n      </Section>\n    </div>\n  );\n}\n\nexport default App;\n\n/*function App() {\n  static propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.any.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      }),\n    ),\n    filter: PropTypes.string,\n  };\n\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    name: '',\n    number: '',\n    filter: '',\n  };\n\n  componentDidMount() {\n    const storedContacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(storedContacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('comp upd', this.state.contacts);\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  handleChangeFilter = event => {\n    const { value } = event.currentTarget;\n    this.setState({ filter: value });\n  };\n\n  formSubmitHandler = data => {\n    console.log('formSubmitHandler data:', data);\n  };\n\n  addNewContact = (newName, newNumber) => {\n    const isNew = this.state.contacts.some(({ name }) => name === newName);\n    if (isNew) {\n      alert(`${newName} is already in contacts.`);\n      return;\n    }\n\n    if (newName && newNumber) {\n      const newContact = { id: uuidv4(), name: newName, number: newNumber };\n      this.setState(prevState => ({\n        contacts: [newContact, ...prevState.contacts],\n      }));\n    }\n    // console.log('newName, newNumber', newName, newNumber);\n  };\n\n  getFilteredContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  deleteContactHandler = contactId => {\n    console.log('id called: ', contactId);\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n    }));\n  };\n\n  render() {\n    // console.log('uuidv4():',uuidv4());\n    // console.log('this.state.name:',this.state.name);\n    // console.log('this.state.number:',this.state.number);\n\n    return (\n      <div className=\"App\">\n        <Section title=\"Phonebook\">\n          <ContactForm\n            onFormSubmit={this.formSubmitHandler}\n            onNewContactAdd={this.addNewContact}\n          />\n        </Section>\n\n        <Section title=\"Contacts\">\n          <Filter\n            message=\"Find contacts by name\"\n            filter={this.state.filter}\n            onChange={this.handleChangeFilter}\n          />\n\n          <ContactList\n            contacts={this.getFilteredContacts()}\n            onDeleteCont={this.deleteContactHandler}\n          />\n        </Section>\n      </div>\n    );\n  }\n} */\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}